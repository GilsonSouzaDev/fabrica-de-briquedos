@use 'variables' as *;
@use 'sass:color';
@use 'sass:math'; // 1. Importar o módulo 'math' do Sass

// Função auxiliar para converter px para rem de forma consistente
@function rem($pixels, $context: 16) {
  // 2. Usar math.div() para a divisão, resolvendo o warning
  @return math.div($pixels, $context) * 1rem;
}

// Animação do Spinner
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

// ... o restante do arquivo SASS permanece exatamente o mesmo ...

// Estilos do componente
:host {
  display: block;
}

.card {
  background-color: $bg-card;
  border-radius: rem(12);
  border: 1px solid $border-card-color;
  box-shadow: 0 rem(4) rem(15) rgba(0, 0, 0, 0.05);

  &__title {
    padding: rem(16) rem(24);
    margin: 0;
    font-size: rem(20);
    font-weight: 500;
    background-color: $bg-light;
    border-bottom: 1px solid $border-card-color;
    border-radius: rem(11) rem(11) 0 0;
    text-align: center;
    color: $text-secondary;
  }
}

.table-responsive {
  overflow-x: auto;
}

.product-table {
  width: 100%;
  border-collapse: collapse;
  min-width: 600px;

  th,
  td {
    padding: rem(16) rem(24);
    text-align: left;
    border-bottom: 1px solid $border-card-color;
  }

  thead th {
    background-color: $second-color;
    color: $text-light;
    font-weight: 500;
  }

  tbody tr {
    transition: background-color 0.2s ease-in-out;

    &:last-child td {
      border-bottom: none;
    }

    &:not(.product-table__row--empty):hover {
      background-color: rgba($primary-color, 0.05);
    }
  }

  tbody td {
    color: $text-secondary;
  }

  &__row--empty td,
  &__row--loading td {
    text-align: center;
    padding: rem(32) rem(24);
    color: $text-secondary;
  }

  &__action {
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    font-family: inherit;
    font-size: inherit;
    text-decoration: none;
    font-weight: 500;
    margin-right: rem(16);
    transition: color 0.2s;

    &--edit {
      color: $primary-color;

      &:hover {
        color: color.adjust($primary-color, $lightness: -10%);
      }
    }

    &--delete {
      color: $danger-color;

      &:hover {
        color: color.adjust($danger-color, $lightness: -10%);
      }
    }
  }

  tr.removendo {
    opacity: 0;
    transform: translateX(rem(-20));
  }
}

.loading-spinner {
  border: rem(4) solid rgba($primary-color, 0.2);
  border-top: rem(4) solid $primary-color;
  border-radius: 50%;
  width: rem(36);
  height: rem(36);
  animation: spin 0.8s linear infinite;
  margin: 0 auto;
}
