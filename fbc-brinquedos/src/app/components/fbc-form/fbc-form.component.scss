/* src/app/components/fbc-form/fbc-form.component.scss */
@use 'variables' as *;
@use 'sass:math';

@function rem($pixels, $context: 16) {
  @return math.div($pixels, $context) * 1rem;
}

.fbc-form {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  margin: auto;
  width: 100%;
  background-color: $bg-body-color;
  padding: rem(8);
  font-family: $fontcard;
}

.form-container {
  border: none;
  padding: rem(16);
  margin: 0;
  background-color: $bg-card;
  border-radius: rem(16);
  box-shadow: 0 rem(10) rem(25) rgba(0, 0, 0, 0.08);
  width: 100%;
  max-width: rem(800);

  legend {
    float: left;
    width: 100%;
    padding: 0;
    margin-bottom: rem(16);
    color: $text-primary;
    font-size: rem(24);
    font-weight: 600;
    text-align: center;
  }
}

form {
  clear: both;
  display: grid;
  grid-template-columns: auto 1fr;
  gap: rem(8) rem(12.8);
  align-items: center;
  padding: rem(16);
  margin-right: rem(16);

  label {
    color: $text-secondary;
    font-size: rem(16);
    font-weight: 500;
    text-align: right;
  }

  input,
  textarea,
  select {
    box-sizing: border-box;
    font: inherit;
    width: 100%;
    padding: rem(8);
    border: 1px solid transparent;
    background-color: $adm-bg-color;
    border-radius: rem(8);
    color: $text-primary;
    transition: all 0.2s ease-in-out;

    &:focus {
      outline: none;
      border-color: $primary-color;
      box-shadow: 0 0 0 rem(3) rgba($primary-color, 0.2);
    }
  }

  // O textarea não precisa mais de uma regra de grid-column aqui
  textarea {
    min-height: rem(80);
    resize: vertical;
  }

  input[name="codigo"] {
    max-width: rem(120);
  }
}

// NOVO: Contêiner para input + mensagens
.input-wrapper {
  grid-column: 2 / 3;
  display: flex;
  flex-direction: column;

  // O textarea está dentro de um wrapper agora, então a regra de coluna vai aqui
  &.textarea-wrapper {
    grid-column: 2 / 3;
  }
}

.actions {
  grid-column: 1 / -1;
  display: flex;
  justify-content: center;
  gap: rem(16);
  margin-top: rem(16);
}

button {
  padding: rem(12.8) rem(16);
  border: none;
  border-radius: rem(8);
  font-size: rem(16);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  min-width: rem(150);

  &[type="submit"] {
    background: linear-gradient(to top, #509bf7, #6eb0fa);
    color: $text-light;
    box-shadow: 0 rem(4) rem(15) rgba($primary-color, 0.3);

    &:hover {
      transform: translateY(rem(-2));
      box-shadow: 0 rem(6) rem(20) rgba($primary-color, 0.35);
    }
  }

  &[type="button"] {
    background-color: transparent;
    color: $text-secondary;

    &:hover {
      background-color: $adm-bg-color;
      color: $text-primary;
    }
  }
}

/* --- Mensagens de erro --- */
.error-message {
  // REMOVIDO: grid-column: 2 / 3;
  color: #d9534f;
  font-size: 0.8em;
  margin-top: rem(4);
  margin-bottom: rem(4);
  text-align: left;
  min-height: 1.2em;
}

/* Inputs inválidos com destaque */
input.ng-invalid.ng-touched,
select.ng-invalid.ng-touched,
textarea.ng-invalid.ng-touched {
  // Adicionado textarea aqui para consistência
  border-left: 5px solid #d9534f;
}

/* Responsividade para telas menores que 600px */
@media (max-width: 600px) {
  form {
    grid-template-columns: 1fr;
    gap: rem(12);

    label {
      text-align: left;
      font-size: rem(14);
    }
  }

  // NOVO: Regra para o wrapper em telas pequenas
  .input-wrapper {
    grid-column: 1;
  }

  .actions {
    flex-direction: column;
    gap: rem(8);

    button {
      width: 100%;
      min-width: unset;
    }
  }

  .form-container {
    padding: rem(12);
    border-radius: rem(12);

    legend {
      font-size: rem(20);
    }
  }

  .error-message {
    // REMOVIDO: grid-column: 1;
    margin-top: rem(4);
    font-size: rem(13);
  }
}
